from api.csvReader import *
from api.snykApi import *
from api.utility import *

def ignoreFromCveInCsv(csvFilePath):
    # Pull CVE data from csv file
    cveData = extract_cve_data_from_csv(csvFilePath)

    # Pull orgs data
    orgsData = get_orgs()
    orgIds = extract_org_ids_from_org_data(orgsData)

    # Collect issues, search for CVEs and ignore if a match is found.
    for orgId in orgIds:
        print("Collecting issues for: " + orgId)
        issues = get_org_issues(orgId)
        for issue in issues:
            for problemsData in issue['attributes']['problems']:
                cveId = problemsData['id']
                if cveId in cveData:
                    print("found matching CVE, Ignoring vuln!")
                    issueId = issue['attributes']['key']
                    projectId = issue['relationships']['scan_item']['data']['id']
                    ignore_vuln(orgId, projectId, issueId)


def ignoreFromCveInCsvDryRun(csvFilePath):
    # Pull CVE data from csv file
    cveData = extract_cve_data_from_csv(csvFilePath)

    # Pull orgs data
    orgsData = get_orgs()
    orgIds = extract_org_ids_from_org_data(orgsData)

    # Collect issues, search for CVEs and ignore if a match is found.
    for orgId in orgIds:
        print("Collecting issues for: " + orgId)
        issues = get_org_issues(orgId)
        for issue in issues:
            for problemsData in issue['attributes']['problems']:
                cveId = problemsData['id']
                if cveId in cveData:
                    print("found matching CVE, Ignoring vuln!")
                    issueId = issue['attributes']['key']
                    projectId = issue['relationships']['scan_item']['data']['id']
                    print(f"Organization ID: {orgId}, Project ID: {projectId}, Issue ID: {issueId}")