import requests
import os
import sys
from lowercase_booleans import false

# Global variables
SNYK_TOKEN = os.getenv('SNYK_TOKEN')
restHeaders = {'Content-Type': 'application/vnd.api+json', 'Authorization': f'token {SNYK_TOKEN}'}
v1Headers = {'Content-Type': 'application/json', 'Authorization': f'token {SNYK_TOKEN}'}

# Collect organizations data from SNYK_TOKEN
def get_orgs():
    url = 'https://api.snyk.io/rest/orgs?limit=100&version=2024-01-23'
    hasNextLink = True
    orgData = []

    while hasNextLink:
        # Api call to orgs endpoint
        try:
            orgs = requests.get(url, headers=restHeaders)
            orgData.extend(orgs.json()['data'])
        except:
            print("Organization endpoint call failed.")
        
        # Check if next page exist and set url if it does.  If not, exit and return orgData
        try:
            orgs.json()['links']['next']
            hasNextLink = True
            url = 'https://api.snyk.io/' + orgs.json()['links']['next']
        except:
            hasNextLink = False
            return orgData
        
def get_projects(orgId):
    hasNextLink = True
    projectData = []
    url = f'https://api.snyk.io/rest/orgs/{orgId}/projects?limit=100&version=2024-01-23'

    while hasNextLink:
        # Api call to projects endpoint
        try:
            projects = requests.get(url, headers=restHeaders)
            projectData.extend(projects.json()['data'])
        except:
            print("Project endpoint call failed.")
            
        # Check if next page exist and set url if it does.  If not, exit and return projectData
        try:
            projects.json()['links']['next']
            hasNextLink = True
            url = 'https://api.snyk.io' + projects.json()['links']['next']
        except:
            hasNextLink = False
            return projectData

def get_org_issues(orgId):
    hasNextLink = True
    issuesData = []
    url = f'https://api.snyk.io/rest/orgs/{orgId}/issues?limit=100&version=2024-01-23&ignored=false'

    while hasNextLink:
        # Api call to issues endpoint
        try:
            issuesApi = requests.get(url, headers=restHeaders)
            issues = issuesApi.json()['data']
            issuesData.extend(issues)
        except:
            print("Issues endpoint call failed.")
            
        # Check if next page exist and set url if it does.  If not, exit and return issuesData
        try:
            issues.json()['links']['next']
            hasNextLink = True
            url = 'https://api.snyk.io' + issues.json()['links']['next']
        except:
            hasNextLink = False
            return issuesData


def ignore_vuln(orgId, projectId, issueId):
    url = f'https://api.snyk.io/v1/org/{orgId}/project/{projectId}/ignore/{issueId}'
    body = {"reason": "Ignoring based off exclusion list", "reasonType": "not-vulnerable", "disregardIfFixable": false}

    print(orgId, projectId, issueId)
    try:
        ignoreApiResponse = requests.post(url, headers=v1Headers, json=body)
    except:
        print("Ignore endpoint call failed.")

    if ignoreApiResponse.status_code == 200:
        return ignoreApiResponse.status_code
    else:
        print(f'Ignore failed with the following error code: {ignoreApiResponse.status_code}')